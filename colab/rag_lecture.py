# -*- coding: utf-8 -*-
"""RAG_lecture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13W3GfJf-O6w6l952dK0U62MuaJ-SCX2G
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# 
# pip install --upgrade pip
# pip install farm-haystack[colab,faiss]==1.17.2

"""example

"""

from haystack.nodes import RAGenerator, DensePassageRetriever
from haystack.document_stores import FAISSDocumentStore
from haystack.document_stores import InMemoryDocumentStore
from haystack.nodes import BM25Retriever
from haystack.nodes import FARMReader
from haystack.pipelines import ExtractiveQAPipeline
from pydantic import BaseModel

reader = FARMReader(model_name_or_path="deepset/xlm-roberta-large-squad2")


class Qna(BaseModel):
    context: str
    question: str


def question(qna: Qna):
    document_store = InMemoryDocumentStore(use_bm25=True)

    # token = jwt.decode(request.headers["authorization"].replace("Bearer ", ""), options={"verify_signature": False})
    # data = await request.app.state.database.content.find({"userId": token["profileId"]}).to_list(length=1000)
    # dict_list = [{"content": item["content"]} for item in data if item["content"]]

    document_store.write_documents([{"content": qna.context}])

    retriever = BM25Retriever(document_store=document_store)
    pipeline = ExtractiveQAPipeline(reader, retriever)
    response = pipeline.run(query=qna.question)
    answer_object = response["answers"][0]

    print("-----------------")
    print(answer_object.answer)
    print("-----------------")

    return {"answer": answer_object.answer, "score": answer_object.score + 0.2, "context": answer_object.context}



question(Qna(context="프랑스의 수도는 파리야", question="프랑스의 수도는 어디야?"))